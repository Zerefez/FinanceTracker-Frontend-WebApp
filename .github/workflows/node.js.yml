name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # This grants permission to push changes

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: node --max-old-space-size=4096 node_modules/vitest/vitest.mjs run --reporter=verbose
        continue-on-error: false
        id: regular_test
      
      - name: Generate coverage report
        run: |
          echo "========================================"
          echo "RUNNING COVERAGE REPORT FOR SOURCE FILES"
          echo "========================================"
          node --max-old-space-size=4096 node_modules/vitest/vitest.mjs run --coverage.provider=istanbul --coverage.include="src/**/*.{ts,tsx}" --coverage.exclude="src/test/**/*" --coverage.reporter=text --coverage.reportClassesPerFile=true --coverage.lines=true --coverage.functions=true --coverage.branches=true --coverage.statements=true
          echo "========================================"
          echo "COVERAGE REPORT COMPLETE"
          echo "========================================"
        continue-on-error: true
        id: coverage_test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true
          flags: src-only

      - name: Display Coverage Summary
        run: |
          echo "========================================"
          echo "COVERAGE SUMMARY - LOW COVERAGE AREAS"
          echo "========================================"
          
          if [ ! -f "./coverage/coverage-final.json" ]; then
            echo "No coverage report found."
            exit 0
          fi
          
          node -e "
            const coverage = require('./coverage/coverage-final.json');
            let results = [];
            
            Object.keys(coverage).forEach(file => {
              if (file.includes('src/') && !file.includes('src/test/')) {
                const data = coverage[file];
                const statements = data.statementMap ? 
                  Object.keys(data.statementMap).length > 0 ? 
                    Object.keys(data.s).filter(k => data.s[k] > 0).length / Object.keys(data.statementMap).length * 100 : 100 : 0;
                
                results.push({
                  file: file.replace(/.*\/src\//, 'src/'),
                  statements: statements.toFixed(2),
                });
              }
            });
            
            // Sort by coverage (ascending)
            results.sort((a, b) => parseFloat(a.statements) - parseFloat(b.statements));
            
            // Show low coverage files (below 50%)
            console.log('Files with coverage below 50%:');
            const lowCoverage = results.filter(r => parseFloat(r.statements) < 50);
            lowCoverage.forEach(r => console.log(\`\${r.file}: \${r.statements}%\`));
            
            console.log('\\nOverall statistics:');
            console.log(\`Total files analyzed: \${results.length}\`);
            console.log(\`Files with <50% coverage: \${lowCoverage.length}\`);
            console.log(\`Files with >80% coverage: \${results.filter(r => parseFloat(r.statements) > 80).length}\`);
          "
          echo "========================================"

      - name: Run tests sequentially (if prior steps failed)
        if: steps.regular_test.outcome != 'success'
        run: |
          echo "Running tests sequentially due to memory issues..."
          node --max-old-space-size=4096 node_modules/vitest/vitest.mjs --run --single-thread

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ./dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
